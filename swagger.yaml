openapi: 3.0.0
info:
  version: 1.0.0
  title: 'Ticket Office'
  description: 'API for ticket Office'
  contact:
    name: Parsley
    email: justamail@gmail.com
  
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Parsleyka/TicketOffice/1.0.0

paths: 
  /event:
    get:
      tags:
        - event
      summary: Returns events
      description: Returns an array of events
      operationId: getEvent
      responses:
        '200':
          description: seccessful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - event
      summary: Add a new event
      operationId: addEvent
      responses:
        '405':
          description: Invalid input
      security: 
        - auth:
          - 'admin'
          - 'user'
      requestBody:
        $ref: '#/components/requestBodies/Event'
  
  '/event/{eventId}':
    put:
      tags:
        - event
      summary: Find event by ID to edit it
      description: Returns an new event
      operationId: editEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      requestBody:
        $ref: '#/components/requestBodies/Event'
      
  /ticket:
    post:
      tags:
        - ticket
      summary: Add a new ticket
      operationId: addTicket
      responses:
        '405':
          description: Invalid input
      security: 
        - auth:
          - 'admin'
          - 'user'
      requestBody:
        $ref: '#/components/requestBodies/Ticket'
        
  '/ticket/{eventId}':
    get:
      tags:
        - ticket
      summary: Find tisckets by ID
      description: Returns an array of tickets for event
      operationId: getTickets
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
          
  '/ticket/buy/{ticketId}':
    put:
      tags:
        - ticket
      summary: Buy ticket
      description: Change ticket status into bought
      operationId: buyTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bought_Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
  
  '/ticket/reserve/{ticketId}':
    post:
      tags:
        - ticket
      summary: Add Reserve ticket
      description: Change ticket status into reserve
      operationId: reserveTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserved_Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
          
  '/ticket/reserve/cancel/{ticketId}':
    delete:
      tags:
        - ticket
      summary: Remove reserved ticket
      description: Change ticket status into avalible and delete from Reserved_Ticket
      operationId: cancelReserveTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
          
  '/ticket/{ticketId}':
    put:
      tags:
        - ticket
      summary: Find ticket by ID to edit it
      description: Returns an new event
      operationId: editTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of event
          required: true
          schema:
            type: integer
            format: int64
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      requestBody:
        $ref: '#/components/requestBodies/Ticket'

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      security: 
        - auth:
          - 'admin'
          - 'user'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      security: 
        - auth:
          - 'admin'
          - 'user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security: 
        - auth:
          - 'admin'
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found 

components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        location:
          type: string
        date:
          type: string
          format: date-time
      xml:
        name: Event

    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_event:
          type: integer
          format: int64
        price:
          type: number
        status:
          type: string
          enum:
            - avalible
            - bought
            - reserved
      xml:
        name: Ticket

    Bought_Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_Ticket:
          type: integer
          format: int64
        id_User:
          type: integer
          format: int64
      xml:
        name: Bought_Ticket
        
    Reserved_Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_Ticket:
          type: integer
          format: int64
        id_User:
          type: integer
          format: int64
      xml:
        name: Bought_Ticket

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
          description: user permissions
      xml:
        name: User
    
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event object that needs to be added
      required: true
 
    Ticket:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ticket'
      description: Ticket object that needs to be added
      required: true

    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  
  securitySchemes:
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'admin': modify information
            'user': read information
